@page "/new"
@using Codepedia.DB
@using System.Text.Json
@model Codepedia.Pages.snippetEditModel
@{
	var compareTo = Model.EntryData;
	if (Model.SuggestionInfo?.Status == "Unreviewed" && Model.LatestEntryData != null)
		compareTo = Model.LatestEntryData;
	if (Model.CommitBased)
		compareTo = Model.PreviousCommitData;
	bool isReadonly = Model.CommitBased || Model.SuggestionInfo is { Status: not "Unreviewed" };
	string conditionalDisabled = isReadonly ? "disabled" : "";
	if (compareTo != null)
		ViewData["full-width"] = true;
}
@section HEAD
{
	<style>
		.tab {
			overflow: hidden;
			border: 1px solid #ccc;
			background-color: #f1f1f1;
		}

		/* Style the buttons inside the tab */
		.tab button {
			background-color: inherit;
			float: left;
			border: none;
			outline: none;
			cursor: pointer;
			padding: 14px 16px;
			transition: 0.3s;
			font-size: 17px;
		}

		/* Change background color of buttons on hover */
		.tab button:hover {
			background-color: #ddd;
		}

		/* Create an active/current tablink class */
		.tab button.active {
			background-color: #ccc;
		}

		/* Style the tab content */
		.tabcontent {
			display: none;
			padding: 6px 12px;
			border: 1px solid #ccc;
			border-top: none;
		}
		.urlDiv:focus
		{
			outline: 0.5px solid rgb(118, 118, 118);
		}
		legend {
			display: block;
			padding-inline-start: 2px;
			padding-inline-end: 2px;
			border-width: initial;
			border-style: none;
			border-color: initial;
			border-image: initial;
			width: auto;
		}
		fieldset {
			display: block;
			margin-inline-start: 2px;
			margin-inline-end: 2px;
			padding-block-start: 0.35em;
			padding-inline-start: 0.75em;
			padding-inline-end: 0.75em;
			padding-block-end: 0.625em;
			min-inline-size: min-content;
			border-width: 2px;
			border-style: groove;
			border-color: threedface;
			border-image: initial;
		}
		button {
			border: 0.5px solid black;
		}
	</style>
	<script src="/js/diff.js"></script>
	<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/diff2html/bundles/css/diff2html.min.css" />
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/diff2html/bundles/js/diff2html-ui.min.js"></script>
	<script>
		function getDiffHTML (commonRoot, other, $new)
		{
			function getFileName (fileData) {
				return `${fileData.name} (/${fileData.slug})`;
			}
			$new = {
				...$new,
				markdown: diff3Merge({
					ourContent: $new.markdown,
					baseContent: commonRoot.markdown,
					theirContent: other.markdown,
					ourName: 'My Version',
					baseName: 'Old Version',
					theirName: 'Latest Version'
				})
			};
			const diff = Diff.createTwoFilesPatch(getFileName(other), getFileName($new), other.markdown, $new.markdown);;
			const htmlDiff = Diff2Html.getPrettyHtml(diff, { inputFormat: 'diff', showFiles: false, matching: 'lines', outputFormat: 'side-by-side' });
			return htmlDiff;
		}
	</script>
}
<!--<input style="width:100%;height:2em" /><br /><br />-->
<div>
	@if (Model.SuggestedBy is DB.User suggestedBy)
	{
		<a style="font-size:1.5em" href="@(HttpContext.UserRole() == UserRole.Admin ? "/admin/suggestions" : $"/users/{HttpContext.Username()}")">← Back</a>
		<div class="alert alert-primary" role="alert">
			Suggested as 
			@if (Model.UpdatedEntryData is snippetEditModel.CommitData commitD)
			{
				<text>an edit to <a href="/@commitD.Slug">@commitD.Name</a></text>
			}
			else
			{
				<text>a new post</text>
			}
			 by 
			@if (HttpContext.UserRole() != UserRole.Admin)
			{
				<text>you</text>
			}
			else
			{
				<text>@Model.SuggestedBy.DisplayName</text>
			}
			 @(Model.SuggestionData.Value.TimeCreated.ToRelativeTime()).
			@if (!isReadonly && HttpContext.UserRole() == UserRole.Admin)
			{
				<br />
				<a href="/rejectSuggestion/@Model.SuggestionInfo.Id">Reject Suggestion</a>
			}
		</div>
		@if (isReadonly)
		{
			@if (Model.SuggestionInfo.Status is "Rejected" or "Retracted")
			{
				<div class="alert alert-danger" role="alert">
					Suggestion @Model.SuggestionInfo.Status.ToLower() by
					@Model.UserRejected.DisplayName
					@(Model.SuggestionInfo.TimeRejected.Value.ToRelativeTime()).
				</div>
			}
			else if (Model.SuggestionInfo.Status == "Accepted")
			{
				<div class="alert alert-success" role="alert">
					Suggestion accepted by
					@Model.ApprovedBy.DisplayName
					@(Model.MergingCommit.TimeCommited.ToRelativeTime()).
				</div>
			}
		}
	}
	else if (Model.UpdatedEntryData is snippetEditModel.CommitData commitData)
	{
		<a href="/@commitData.Slug" style="font-size:1.5em">← Back</a>
	}
	@if (!isReadonly)
	{
		if (Model.LatestSuggestionData != null)
		{
			<div class="alert alert-warning" role="alert">
				Warning: Changes were made to the suggestion since this draft was made.
				Merge changes before continuing.
				<br>
				<a href="javascript:discardDraft()">Discard Draft</a>
			</div>
		}
		else if (Model.SuggestionData != null && Model.LatestEntryData != null)
		{
			@if (!isReadonly)
			{
				<div class="alert alert-warning" role="alert">
					Warning: Changes were made to the post since this suggestion was made.
					Merge changes before continuing.
				</div>
			}
		}
		else if (Model.LatestEntryData != null && Model.SuggestionData == null)
		{
			<div class="alert alert-warning" role="alert">
				Warning: Changes were made to the post since this draft was made.
				Merge changes before continuing.
				<br>
				<a href="javascript:discardDraft()">Discard Draft</a>
			</div>
		}
	}
	@if (Model.RelevantSuggestions is {} relSuggestions && relSuggestions.Count > 0)
	{
		<div class="alert alert-info" role="alert">
			You have pending suggestions to this post:
			<ul>
				@foreach ((WikiSuggestion relevantSuggestion, DateTime timeCreated) in Model.RelevantSuggestions)
				{
					<li><a href="/suggestions/@relevantSuggestion.Id">@timeCreated.ToRelativeTime()</a></li>
				}
			</ul>
		</div>
	}
</div>
<form style="display:none" method="post" id=ddForm></form>
<form method=POST id=editForm>
@if (compareTo != null)
{
	@Html.Raw("<div class=\"row\">")
	<div id=tabs0 class="tabContainer col-md-6" style="border-right:1px solid black">
		<h1 style="text-align:center; text-decoration: underline">Current Version</h1>
		<input style="width:calc(100% - 25em);height:2em;float:left" disabled value="@compareTo?.Name" />
		<div class=urlDiv style="border:0.5px solid rgb(118, 118, 118);width:20em;float:right"><label><b style="cursor:text">coding.click/</b><input style="outline:none;border:none;margin:0px;padding:0px" disabled value="@compareTo?.Slug" /></label></div>
		<br /><br />
		<div class="tab">
		  <button type=button class="tablinks" onclick="openTab(this, 'Edit')" name=editBtn>Edit</button>
		  <button type=button class="tablinks" onclick="openTab(this, 'Preview')">Preview</button>
		</div>
		<div name=Edit class="tabcontent">
			<textarea name=markdownOld disabled style="tab-size:4;font-family:SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;width:100%;height:30em">@compareTo?.Markdown</textarea>
		</div>

		<div name=Preview class="tabcontent">
    
		</div>
	</div>
}
<div id=tabs1 class="tabContainer @(compareTo == null ? null : "col-md-6")">
	@if (compareTo != null) { <h1 style="text-align:center; text-decoration: underline">Proposed Version</h1> }
	<input style="width:calc(100% - 25em);height:2em;float:left" name=entryName oninput="onInput()" value="@Model.commit?.Name" required />
	<div class=urlDiv style="border:0.5px solid rgb(118, 118, 118);width:20em;float:right"><label><b style="cursor:text">coding.click/</b><input required oninput="onInput()" style="outline:none;border:none;margin:0px;padding:0px" name="slug" value="@Model.commit?.Slug" /></label></div>
	<br /><br />
	<div class="tab">
	  <button type=button class="tablinks" onclick="openTab(this, 'Edit')" name=editBtn>Edit</button>
	  <button type=button class="tablinks" onclick="openTab(this, 'Preview')">Preview</button>
	</div>
	<div name="Edit" class="tabcontent">
		<textarea oninput="onInput()" style="tab-size:4;font-family:SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;width:100%;height:30em" name=markdown id=editBox @Html.Raw(conditionalDisabled)>@Model.commit?.Markdown</textarea>
	</div>

	<div name="Preview" class="tabcontent">
    
	</div>
	@if (!isReadonly)
	{
		<div id=draftInfo style="@(Model.DraftData == null ? "display:none" : null)">
			<br />
			<div id=draftStatus></div>
			<script>
				async function discardDraft ()
				{
					if (!(draftID.value?.length > 0)) return;
					let formData = new FormData(ddForm);
					formData.append('draftID', draftID.value);
					let res = await fetch('/discardDraft', {
						method: 'POST',
						credentials: 'same-origin',
						body: formData
					});
					if (!res.ok) return;
					let text = await res.text();
					if (text !== 'Draft deleted') return;
					location.reload();
					@*let nonDraftData = @Html.Raw((
						Model.LatestSuggestionData ?? Model.SuggestionData ?? Model.LatestEntryData ?? Model.EntryData ?? new object()
					).ToJson());
					let tabs1_children = byName(tabs1);
					tabs1_children.entryName.value = nonDraftData?.name ?? '';
					tabs1_children.slug.value = nonDraftData?.slug ?? '';
					tabs1_children.markdown.value = nonDraftData?.markdown ?? '';
					tabs1_children.message.value = nonDraftData?.message ?? '';*@
				}
			</script>
			<div id=ddDraftButton style="@(Model.DraftData == null ? "display:none" : null)">
				<button type=button class="btn btn-primary" onclick="discardDraft()">Discard Draft</button>
				<br />
			</div>
		</div>
	}
	<br />
	<textarea placeholder="Summary of @(Model.EntryData != null ? "Changes" : "Post") / Extra Notes for Reviewer?" rows="1" style="width:100%" oninput="onInput()" name=message required @Html.Raw(conditionalDisabled)>@Model.commit?.Message</textarea>
	<br /><br />
	<input name="baseEntryCommitID" type="hidden" value="@Model.EntryData?.Id" />
	<input name="baseSuggestionCommitID" type="hidden" value="@Model.SuggestionData?.Id" />
	<input id=draftID name="draft" type="hidden" value="@Model.DraftData?.Id" />
	<input name="insertingForReals" type="hidden" value="true" />
@if (HttpContext.UserRole() == UserRole.Admin && Model.SuggestionData != null)
{
	<div class=form-group>
		<label for=repAwardedI>Reputation Awarded</label>
		<input  id=repAwardedI name="reputationAwarded" type=number value="@(isReadonly ? (Model.SuggestionInfo.ReputationAwarded ?? 0) : null)" @Html.Raw(conditionalDisabled) />
	</div>
}
@if (!isReadonly)
{
	<button>@(
		HttpContext.UserRole() switch
		{
			UserRole.Admin => Model.SuggestionData != null ? "Accept Suggestion" : Model.EntryData != null ? "Save Changes" : "Create Post",
			_ => Model.SuggestionData != null ? "Save Changes" : Model.EntryData != null ? "Suggest Edit" : "Suggest Post"
		}
	)</button>
}
</div>
@if (compareTo != null)
{
	@Html.Raw("</div>")
}
</form>
<script>
{
	let timeoutID;
	function onInput ()
	{
		draftInfo.style.display = '';
		draftStatus.innerText = 'Saving as draft';
		clearTimeout(timeoutID);
		timeoutID = setTimeout(async () =>
		{
			let formData = new FormData(editForm);
			formData.delete('insertingForReals');
			formData.append('insertingForReals', false);
			try
			{
				let response = await fetch('/new', {
					method: 'POST',
					body: formData,
					credentials: 'same-origin'
				});
				if (response.ok)
				{
					let t = await response.text();
					if (t.match(/^Draft Saved; ID=/))
					{
						draftID.value = t.replace(/^Draft Saved; ID=/, '');
						draftStatus.innerText = 'Saved as Draft';
						ddDraftButton.style.display = '';
						return;
					}
					else if (t === 'Draft Saved')
					{
						draftStatus.innerText = 'Saved as Draft';
						ddDraftButton.style.display = '';
						return;
					}
				}
			}
			catch (e) { }
			draftStatus.innerText = 'Failed to Save Draft';
		}, 1000);
	}
}
</script>
<script>
{
	var enabled = true;
	editBox.onkeydown = function(e) {
		const selectionDirection = (() =>
		{
			if (this.selectionStart === this.selectionEnd) return 0;
			var sel = getSelection(),
			  position = sel.anchorNode.compareDocumentPosition(sel.focusNode),
			  backward = false;
			// position == 0 if nodes are the same
			if (!position && sel.anchorOffset > sel.focusOffset || 
			  position === Node.DOCUMENT_POSITION_PRECEDING)
			  backward = true;
			return backward ? -1 : 1;
		})();
		let moving = selectionDirection === 1 ?
			(v => v ? this.selectionEnd = v : this.selectionEnd) :
			(v => v ? this.selectionStart = v : this.selectionStart);
		let increment = () => {
			if (moving() < this.value.length)
			{
				moving(moving() + 1);
				return true;
			}
			else return false;
		};
		let decrement = () => {
			if (moving() > 0)
			{
				moving(moving() - 1);
				return true;
			}
			else return false;
		};
		let char = () => this.value[moving() - (moving() === -1 ? 1 : 0)];
		if (!e.shiftKey && this.selectionStart !== this.selectionEnd)
			return true;
		// Left
		/*else if (e.keyCode === 37 && enabled)
		{
			if (moving() === 0 || char() !== ' ')
				return true;
			let n = 0;
			while (char() === ' ' && n++ < 4 && char() === ' ' && decrement());
			return false;
		}
		// Right
		else if (e.keyCode === 39 && enabled)
		{
			if (this.selectionStart === this.value.length || char() !== ' ')
				return true;
			let n = 0;
			while (char() === ' ' && n++ < 4 && char() === ' ' && increment());
			return false;
		}
		// Backspace
		else if (e.keyCode === '\b'.charCodeAt(0) && enabled)
		{
			if (this.selectionStart === 0 || this.value[this.selectionStart - 1] !== ' ')
				return true;
			for (let n = 0; n < 4 && this.selectionStart > 0 && this.value[this.selectionStart-1] === ' '; n++)
			{
				document.execCommand('delete');
			}
			return false;
		}
		// Del
		else if (e.keyCode === 46)
		{
			if (this.selectionStart === this.value.length || this.value[this.selectionStart] !== ' ')
				return true;
			for (let n = 0; n < 4 && this.selectionEnd < this.value.length && this.value[this.selectionStart] === ' '; n++)
			{
				document.execCommand('forwardDelete');
			}
			return false;
		}*/
		// Enter Key?
		/*else */if (e.keyCode === 13 && enabled)
		{
			// selection?
			if (this.selectionStart === this.selectionEnd)
			{
				// find start of the current line
				var sel = this.selectionStart;
				var text = this.value;
				let bracket = false;
				if (sel > 0 && '{(['.includes(text[sel - 1]))
					bracket = true;
				while (sel > 0 && text[sel-1] !== '\n')
					sel--;

				var lineStart = sel;
				while (text[sel] === ' ' || text[sel] === '\t')
					sel++;

				if (sel > lineStart || bracket)
				{
					// Insert carriage return and indented text
					document.execCommand('insertText', false, "\n" + (bracket ? '\t' : '') + text.substr(lineStart, sel-lineStart));

					// Scroll caret visible
					this.blur();
					this.focus();
					return false;
				}
			}
		}

		// Tab key?
		else if(e.keyCode === 9 && enabled) 
		{
			// selection?
			if (this.selectionStart === this.selectionEnd)
			{
				// These single character operations are undoable
				if (!e.shiftKey)
				{
					document.execCommand('insertText', false, "\t");
				}
				else
				{
					var text = this.value;
					if (this.selectionStart > 0 && text[this.selectionStart-1] === '\t')
					{
						document.execCommand('delete');
					}
				}
			}
			else
			{
				// Block indent/unindent trashes undo stack.
				// Select whole lines
				var selStart = this.selectionStart;
				var selEnd = this.selectionEnd;
				var text = $(this).val();
				while (selStart > 0 && text[selStart-1] !== '\n')
					selStart--;
				while (selEnd > 0 && text[selEnd-1] !== '\n' && selEnd < text.length)
					selEnd++;

				// Get selected text
				var lines = text.substr(selStart, selEnd - selStart).split('\n');

				// Insert tabs
				for (var i=0; i<lines.length; i++)
				{
					// Don't indent last line if cursor at start of line
					if (i==lines.length-1 && lines[i].length==0)
						continue;

					// Tab or Shift+Tab?
					if (e.shiftKey)
					{
						if (lines[i].startsWith('\t'))
							lines[i] = lines[i].substr(1);
						else if (lines[i].startsWith("    "))
							lines[i] = lines[i].substr(4);
					}
					else
						lines[i] = "\t" + lines[i];
				}
				lines = lines.join('\n');

				// Update the text area
				this.value = text.substr(0, selStart) + lines + text.substr(selEnd);
				this.selectionStart = selStart;
				this.selectionEnd = selStart + lines.length; 
			}

			return false;
		}
		// Home key?
		else if (e.keyCode === 36 && enabled)
		{
			var sel = this.selectionStart;
			var text = this.value;
			while (sel > 0 && text[sel-1] !== '\n')
				sel--;
			var lineStart = sel;
			while (text[sel] === ' ' || text[sel] === '\t')
				sel++;
			if (sel === this.selectionStart) return true;
			this.selectionStart = sel;
			if (!e.shiftKey) this.selectionEnd = sel;

			return false;
		}

		enabled = true;
		return true;
	};
}
//editBox.addEventListener('keydown', function(e) {
//if (e.key === 'Tab') {
//e.preventDefault();
//var start = this.selectionStart;
//var end = this.selectionEnd;

//// set textarea value to: text before caret + tab + text after caret
//this.value = this.value.substring(0, start) + "    " + this.value.substring(end);

//// put caret at right position again
//this.selectionStart =
//    this.selectionEnd = start + 1;
//}
//});
</script>
<script>
function byName (elem)
{
    return new Proxy({}, {
        get (_, prop) { return elem.querySelector(`[name=${prop}]`); }
    });
}
async function openTab(elem, tabName) {
  let tabContainer = elem.closest('.tabContainer');
  var i, tabcontent, tablinks;
  tabcontent = tabContainer.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = tabContainer.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  let tabContainerElems = byName(tabContainer);
  tabContainerElems[tabName].style.display = "block";
  elem.className += " active";
  if (tabName === 'Preview')
  {
      tabContainerElems.Preview.innerText = 'Loading...';
      for (let n = 0; n < 5; n++)
      {
          try
          {
			  let formData = new FormData(ddForm);
			  formData.append('markdown', (tabContainerElems.markdown ?? tabContainerElems.markdownOld).value);
              tabContainerElems.Preview.innerHTML = await (await fetch('/api/markdown', { method: 'POST', body: formData })).text();
              break;
          }
          catch (e)
          {

          }
      }
  }
}
openTab(byName(tabs1).editBtn, "Edit");
</script>
@if (compareTo != null)
{
	<script>
	openTab(byName(tabs0).editBtn, "Edit");
	</script>
}