@page "/{slug}"
@using static Codepedia.Functions
@model Codepedia.Pages.viewWikiModel
@section HEAD
{
    <style>
    div[data-lang]
    {
        display: none;
    }
    pre
    {
        background-color: #fcfcfc;
        /*max-height: 600px;*/
        display:inline-block;
        padding-right: 20px;
    }
    .tab {
      overflow: hidden;
      border: 1px solid #ccc;
      background-color: #f1f1f1;
    }

    /* Style the buttons inside the tab */
    .tab button {
      background-color: inherit;
      float: left;
      border: none;
      outline: none;
      cursor: pointer;
      padding: 10px 11px;
      transition: 0.3s;
      font-size: 11.5px;
    }

    /* Change background color of buttons on hover */
    .tab button:hover {
      background-color: #ddd;
    }

    /* Create an active/current tablink class */
    .tab button.active {
      background-color: #ccc;
    }

    /* Style the tab content */
    .tabcontent {
      display: none;
      padding: 6px 12px;
      border: 1px solid #ccc;
      border-top: none;
    }
    .urlDiv:focus
    {
        outline: 0.5px solid rgb(118, 118, 118);
    }
    /*#codeName { text-decoration:underline }*/
    </style>
        <script>
    function changeURL (newURL)
    {
	    history.replaceState({}, '', newURL);
    }
    function swap(json){
      var ret = {};
      for(var key in json){
        ret[json[key]] = key;
      }
      return ret;
    }
    </script>
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/vs.min.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/highlight.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
}
<div style="margin-left:5%; margin-right:15%; padding-left:15%; padding-right:5%; border-left:0.25px solid black; border-right: 0.25px solid black">
<h1 style="font-size:3em"><span id=codeName>@Model.Commit.Name</span> <span style="font-size:.8em">[<a href="/@Model.Commit.Slug/edit">Edit</a>]</span></h1>
<div style="border-top: 1px solid black; border-bottom: 1px solid black">
    Created @Model.TimeCreated.ToRelativeTime() 
    @if (Model.TimeCreated != Model.LastUpdated)
    {
        <text>
            • Last updated @Model.LastUpdated.ToRelativeTime()
        </text>
    }
</div>
@if (/*user is admin*/true)
{
    
}
<div id="langSelectorSlot"></div>
<div ng-app>
    @Html.Raw(DisplayMarkdown(Model.Commit.Markdown))
</div>
</div>
<script>
function toLangName (lang)
{
    return lang[0].toUpperCase() + lang.substr(1);
}
function withoutDuplicates (arr) {
  return [...new Set(arr)];
}
let allLangs = Array.from(document.querySelectorAll('div[data-lang]:not(div.codes>*)'));
if (withoutDuplicates(allLangs.map(l => l.getAttribute('data-lang'))).length === 1)
{
    //codeName.innerText += ' (' + toLangName(allLangs[0].getAttribute('data-lang')) + ')';
    allLangs[0].style.display = 'block';
}
else if (allLangs.length > 0)
{
    let langSelector = langSelectorSlot.appendChild(document.createElement('select'));
    langSelector.appendChild(document.createElement('option'));
    for (let langDiv of allLangs)
    {
        let lang = langDiv.getAttribute('data-lang');
        langSelector.appendChild(Object.assign(document.createElement('option'), {
            value: lang,
            innerText: toLangName(lang)
        }));
    }
    langSelector.value = '';
    const langNames = {
        'c#': 'csharp'
    };
    const langNamesReversed = swap(langNames);
    langSelector.oninput = e =>
    {
        for (let langD of document.querySelectorAll('div[data-lang]'))
            langD.style.display = 'none';
        for (let langD of document.querySelectorAll(`div[data-lang='${langSelector.value}']`))
            langD.style.display = 'block';
        changeURL('?' + (langNames[langSelector.value] ?? langSelector.value));
    };
    if (location.search.length > 1)
    {
        const l = location.search.substr(1);
        langSelector.value = langNamesReversed[l] ?? l;
        langSelector.oninput();
    }
}
for (let codeDiv of document.querySelectorAll('div.codes'))
{
    const langDivs = Array.from(codeDiv.querySelectorAll('[data-lang]')).map(d => [d, toLangName(d.getAttribute('data-lang'))]);
    
    const tabs = [];

    const tabDiv = Object.assign(document.createElement('div'), {className: 'tab'});

    for (const [div, _lang] of langDivs)
    {
        const lang = _lang;
        const langTab = Object.assign(document.createElement('button'), {type: 'button', innerText: lang});
        langTab.onclick = () =>
        {
            for (let t of tabs)
            {
                t.className = t.className.replace(" active", "");
            }
            langTab.className += ' active';
            for (let [d, l] of langDivs)
            {
                if (l === lang) d.style.display = 'block';
                else d.style.display = 'none';
            }
        };
        tabDiv.appendChild(langTab);
        tabs.push(langTab);
    }

    if (!langDivs.some(([d])=>d.classList.contains('active')))
    {
        tabDiv.querySelector('button').click();
    }

    codeDiv.firstElementChild.before(tabDiv);
}
</script>